#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
// #include <linux/gpio.h>
#include "gpiod.h"

//
// Created by HuyTV on 7/28/2022.
//

#define DEVICE_NAME_ADC	"/sys/class/power_supply/battery/mpp4_voltage"
#define ERROR  -1

// static void throw_NullPointerException(JNIEnv *env, const char* msg)
// {
    // jclass clazz;
    // clazz = env->FindClass("java/lang/NullPointerException");
    // env->ThrowNew(clazz, msg);
// }

/*
* write GPIO
* params: gpioId, newValue
* return: 0: success, otherwise failed
*/
static int setGpioStatus(jint gpioId, jint gpioStatus)
{
    const char *chipname = "gpiochip0";
    // Orangepi3 gpiochip0 (0-64)
    if (gpioId > 64)
    {
        chipname = "gpiochip1";
    }
    LOGI("Select %s, pin %d, value %d\r", chipname, gpioId, gpioStatus);

    struct gpiod_chip *chip;
    struct gpiod_line *lineIO;
    int ret = -1, val;

    // Open GPIO chip
    chip = gpiod_chip_open_by_name(chipname);
    if (!chip) {
		LOGE("Open chip %s io %d failed, error %d, mean %s\r\n", chipname, gpioId, errno, strerror(errno));
		goto end;
	}

    // Open GPIO lines
    lineIO = gpiod_chip_get_line(chip, gpioId);
    if (!lineIO) {
		LOGE("Get line failed\r\n");
		goto close_chip;
	}

    // Open LED lines for output
    ret = gpiod_line_request_output(lineIO, "GPIO_JNI", gpioStatus);
    if (ret < 0) {
        LOGE("Request line as output failed %d\r\n", errno);
        goto release_line;
    }
    gpiod_line_set_value(lineIO, gpioStatus);
    ret = 0;
    LOGI("Set gpio success, release and close chip\r\n");

release_line:
    // Release lines and chip
    gpiod_line_release(lineIO);
close_chip:
    gpiod_chip_close(chip);
end:
    LOGI("Set gpio : exit\r\n");
    return ret;
}

/*
* read GPIO
* params: gpioId
* return: gpioState: ok, < 0 failed
*/
static int getGpioStatus(jint gpioId)
{
    const char *chipname = "gpiochip0";
    struct gpiod_chip *chip;
    struct gpiod_line *lineIO;
    int val = -1;

    // Open GPIO chip
    // Orangepi3 gpiochip0 (0-64)
    if (gpioId > 64)
    {
        chipname = "gpiochip1";
    }
    chip = gpiod_chip_open_by_name(chipname);
    if (!chip) {
		LOGE("Open chip %s io %d failed, error %d, mean %s\r\n", chipname, gpioId, errno, strerror(errno));
		goto end;
	}

    // Open GPIO lines
    lineIO = gpiod_chip_get_line(chip, gpioId);
    if (!lineIO) {
		LOGE("Get %s line %d failed, error %d, mean %s\r\n", chipname, gpioId, errno, strerror(errno));
		goto close_chip;
	}

//    // Open switch line for input
//    gpiod_line_request_input(lineIO, "gpio_state");
    val = gpiod_line_get_value(lineIO);
    LOGE("GPIO%d = %d\r\n", gpioId, val);
    if (val == -1)
    {
        LOGE("GPIO get line value, error no %d, mean %s\r\n", errno, strerror(errno));
    }

    // Release lines and chip
    gpiod_line_release(lineIO);
close_chip:
    gpiod_chip_close(chip);
end:
    return val;
}


jint Java_com_example_gpio_Gpio_getGpioStatus
	(JNIEnv *env, jobject clazz, jint gpioId)
{
	//LOGI("getGpioStatus %d", gpioId);
	int ret = getGpioStatus(gpioId);
	return ret;
}

/*
* Java_com_binhanh_periph_gpio_Gpio_setGpioStatus
* params: (I)gpioId, (I)gpioStatus
* return: (I)
*/
jint Java_com_example_gpio_Gpio_setGpioStatus
	(JNIEnv *env, jobject clazz, jint gpioId, jint gpioStatus)
{
	int ret = setGpioStatus(gpioId, gpioStatus);
	return ret;
}

/*
* Java_com_binhanh_periph_gpio_Gpio_setGpioStatus
* params: (I)gpioId, (I)gpioStatus
* return: (I)
*/
jint Java_com_example_gpio_Gpio_setMode
	(JNIEnv *env, jobject clazz, jint gpioId)
{
	int ret = setGpioStatus(gpioId, gpioStatus);
	return ret;
}


